package ui.game;

import dtos.DominoDTO;
import graphics.DominoGameGraphic;
import graphics.GamePanel;
import graphics.Puntero;
import graphics.PunteroListener;
import graphics.Utils;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 */
public class GameViewImpl extends javax.swing.JFrame implements GameView, PunteroListener, KeyListener {
    
    private GamePresenter presenter;
    
    private static final Logger LOG = Logger.getLogger(GameViewImpl.class.getName());

    /**
     * Creates new form FramePrueba
     */
    public GameViewImpl() {
        initComponents();
        Puntero.setGamePanel(gamePanel);
        addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new graphics.GamePanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1145, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );

        getContentPane().add(gamePanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private graphics.GamePanel gamePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showInvalidMoveError() {
        JOptionPane.showMessageDialog(this, "Invalid move.", "Alert", JOptionPane.INFORMATION_MESSAGE);
    }
    
    @Override
    public void updateGame(final GameViewModel gameViewModel)  {
        try {
            DominoGameGraphic dominoGameGraphic = Utils.createDominoGameGraphic(gameViewModel);
            System.out.println(gameViewModel);
            this.remove(this.gamePanel);
            this.gamePanel = new GamePanel(dominoGameGraphic);
            this.gamePanel.addMouseListener(new Puntero(this.gamePanel, this));
            
            javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(this.gamePanel);
            gamePanel.setLayout(gamePanelLayout);
            this.add(this.gamePanel, java.awt.BorderLayout.CENTER);
            
            this.revalidate();
            this.repaint();
        } catch (IOException ex) {
            Logger.getLogger(GameViewImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void open() {
        this.setVisible(true);
    }
    
    @Override
    public void close() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void setPresenter(final GamePresenter presenter) {
        this.presenter = presenter;
    }
    
    @Override
    public void putTileInBoard(final DominoDTO tile) {
        this.presenter.putTileInBoard(tile);
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        
        if (KeyEvent.getKeyText(keyCode).equals("Q")) {
            this.presenter.takeFromPool();
        } else if (KeyEvent.getKeyText(keyCode).equals("W")) {
            this.presenter.skipTurn();
        }
        
    }
    
    @Override
    public void keyReleased(KeyEvent e) {
    }
    
    @Override
    public void showGameOver(final GameViewModel gameViewModel) {
        LOG.info(gameViewModel.getGameResume().toString());
        this.updateGame(gameViewModel);
        
    }
}
